<?php
//=====================================================================================================================||
//===|| Core::Cache Connection Config
//===|| Created : 2017-07-11
//=====================================================================================================================||
//===|| Last Update - 2017-07-10
//===||
//===||
//===||
//=====================================================================================================================||

    //=====================================================================================================================||
    //===|| Cache
    //=====================================================================================================================||

    class CacheRedis {

	//=====================================================================================================================||
	//===|| Handler
	//=====================================================================================================================||

	var $handler;
	var $connected = false;

	//=====================================================================================================================||
	//===|| Construct
	//=====================================================================================================================||

	function __construct($host = '', $port = '') {
	    $this->host = $host;
	    $this->port = $port;
	    $this->connect();
	}

	//=====================================================================================================================||
	//===|| Connect
	//=====================================================================================================================||

	function connect() {
	    //if (!class_exists('Redis')) Err::critical('Redis not installed');
	    if ($this->connected === true) return true;
	    $this->handler = new Redis();
	    $this->connected = $this->handler->connect($this->host, $this->port);
	    return $this->connected;
	}

	//=====================================================================================================================||
	//===|| Get
	//=====================================================================================================================||

	function get($key) {
	    //=====================================================================================================================||
	    //===|| Connect
	    //=====================================================================================================================||
	    $this->connect();
	    //=====================================================================================================================||
	    //===|| Get the Data and Base64 Decode
	    //=====================================================================================================================||
	    $x = $this->handler->get($key);
	    $x = base64_decode($x);
	    //=====================================================================================================================||
	    //===|| Check if we have valid JSON
	    //=====================================================================================================================||
	    $y = json_decode($x,  true);
	    if ($y == null || !$y || !is_array($y)) return null;
	    if (!isset($y['type']) || !isset($y['data'])) return null;
	    //=====================================================================================================================||
	    //===|| Get the Value
	    //=====================================================================================================================||
	    if ($y['type'] == 'number' || $y['type'] == 'string') return $y['data'];
	    if (is_array($y['value'])) return $y['data'];
	    //=====================================================================================================================||
	    //===|| If we're JSON but not decoded
	    //=====================================================================================================================||
	    $tmp = json_decode($y['data'], true);
	    if (!$tmp) return null;
	    return $tmp;
	}

	//=====================================================================================================================||
	//===|| Get
	//=====================================================================================================================||

	function getRaw($key) {
	    //=====================================================================================================================||
	    //===|| Connect
	    //=====================================================================================================================||
	    $this->connect();
	    //=====================================================================================================================||
	    //===|| Get the Data
	    //=====================================================================================================================||
	    return $this->handler->get($key);
	}

	//=====================================================================================================================||
	//===|| Exists
	//=====================================================================================================================||

	function exists($key) {
	    $this->connect();
	    return ($this->get($key));
	}

	//=====================================================================================================================||
	//===|| Set
	//=====================================================================================================================||

	function set($key, $value, $timeout = null) {
	    //=====================================================================================================================||
	    //===|| Connect
	    //=====================================================================================================================||
	    $this->connect();
	    //=====================================================================================================================||
	    //===|| Determine Type
	    //=====================================================================================================================||
	    if (is_numeric($value)) $obj = array('type' => 'number', 'data' => $value); else {
		if (is_array($value)) $obj = array('type' => 'object', 'data' => $value); else {
		    $tmp = json_decode($value, true);
		    //Is it an object
		    if ($tmp !== null && $tmp !== false) $obj = array('type' => 'object', 'data' => $tmp); else
		    //String
		    $obj = array('type' => 'string', 'data' => $value);
		}
	    }
	    //=====================================================================================================================||
	    //===|| Created Updated Timeout
	    //=====================================================================================================================||
	    $obj['created']   = time();
	    $obj['updated']   = time();
	    $obj['timeout']   = (is_numeric($timeout)) ? $timeout : null;
	    //=====================================================================================================================||
	    //===|| Convert to JSON and Base Encode
	    //=====================================================================================================================||
	    $data = base64_encode(json_encode($obj));
	    //=====================================================================================================================||
	    //===|| Set
	    //=====================================================================================================================||
	    $this->handler->set($key, $data);
	    //=====================================================================================================================||
	    //===|| Return the Value
	    //=====================================================================================================================||
	    return ($value);
	}

	//=====================================================================================================================||
	//===|| Set
	//=====================================================================================================================||

	function setRaw($key, $value, $timeout = '') {
	    if (is_array($value)) $value = json_encode($value);
	    $this->connect();
	    $this->handler->set($key, $value);
	    return ($value);
	}

	//=====================================================================================================================||
	//===|| Delete
	//=====================================================================================================================||

	function delete($key) {
	    $this->connect();
	    $this->handler->unlink($this->_hash($key));
	}

	//=====================================================================================================================||
	//===|| Delete
	//=====================================================================================================================||

	function deleteRaw($key) {
	    $this->connect();
	    $this->handler->unlink($key);
	}

	//=====================================================================================================================||
	//===|| Publish
	//=====================================================================================================================||

	function publish($message, $channel = 'BABBLE-CHANNEL') {
	    $this->connect();
	    return $this->handler->publish($channel, $message);
	}

	//=====================================================================================================================||
	//===|| Private : Hash
	//=====================================================================================================================||

	private function _hash($key) {
	    return md5(implode('|', array($_SERVER['HTTP_HOST'], $key)));
	}

	//=====================================================================================================================||
	//===|| Private : Timeout
	//=====================================================================================================================||

	private function _timeout($seconds) {
	    $timeout = ($seconds == '') ? (60 * 60) : $seconds;
	    $timeout = (is_numeric($timeout)) ? $timeout : (60 * 60);
	    $timeout = (is_numeric($timeout) && $timeout > -1 && $timeout < 2592000) ? $timeout : (60 * 60);
	    return $timeout;
	}

	//=====================================================================================================================||
	//===|| EOC
	//=====================================================================================================================||

    }
